@page "/"
@page "/singlechord"

<PageTitle>Single Chords</PageTitle>

@using ScaleSourceWeb.Data
@using ChordCanvas
@using Blazor.Extensions; 
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D
@inject ChordFinderService ChordService

<div class="ChordDisplay">
    
    @if (mRequestFailed)
    {
        <p>Request Failed. The entered chord may have been invalid.</p>
    }

    @if (mCurrentChord is null && !mRequestFailed)
    {
        <div class="loader"></div> 
    }

    <div class="CanvasWrapper">
    <BECanvas @ref="mCanvasReference" Width="350" Height="525"></BECanvas>
    </div>
</div>

<div class="ChordEntry">
    <SfButtonGroup CssClass="ButtonGroup">
    @foreach (var noteButton in mNoteButtons)
    {
        <ButtonGroupButton CssClass=@noteButton.CSS @bind=@noteButton.Button IsToggle="true"
        @onclick="async() => await ToggleButton(noteButton)">@noteButton.Name</ButtonGroupButton>
    }
    </SfButtonGroup>

    <br />

    <SfButtonGroup CssClass="ButtonGroup">
    @foreach (var accidentalButton in mAccButtons)
    {
        <ButtonGroupButton CssClass=@accidentalButton.CSS @bind=@accidentalButton.Button IsToggle="true" 
        @onclick="async() => await ToggleButton(accidentalButton)">@accidentalButton.Name</ButtonGroupButton>
    }
    </SfButtonGroup>

    <br />

    <SfButtonGroup CssClass="ButtonGroup">
    @foreach (var scaleButton in mScaleButtons)
    {
        <ButtonGroupButton CssClass=@scaleButton.CSS @bind=@scaleButton.Button IsToggle="true" 
        @onclick="async() => await ToggleButton(scaleButton)">@scaleButton.Name</ButtonGroupButton>
    }
    </SfButtonGroup>
</div>

<div class="HiddenCanvas">
    <BECanvas @ref="mCanvasReferenceHidden" Width="1200" Height="800"></BECanvas>
</div>

@code {
    private EntryButton[] mNoteButtons = Enumerable.Range(0, 7).Select(i => new EntryButton(i, ChordEntryStage.Note)).ToArray();
    private EntryButton[] mAccButtons = Enumerable.Range(0, 3).Select(i => new EntryButton(i, ChordEntryStage.Accidental)).ToArray();
    private EntryButton[] mScaleButtons = Enumerable.Range(0, 2).Select(i => new EntryButton(i, ChordEntryStage.Scale)).ToArray();

    private EntryButton mCurrentNote;
    private EntryButton mCurrentAcc;
    private EntryButton mCurrentScale;

    private string mNoteEntered = "C";
    private string mAccidentalEntered = "";
    private string mScaleEntered = "";

    private string mRequestChord = "";

    private Chord? mCurrentChord = null;
    private bool mRequestFailed = false;

    private Canvas2DContext? mContext;
    protected BECanvasComponent? mCanvasReference;
    private Canvas2DContext? mContextHidden;
    protected BECanvasComponent? mCanvasReferenceHidden;

    private async Task RequestChord()
    {
        mRequestChord = mNoteEntered + mAccidentalEntered;
        if (mScaleEntered != string.Empty)
            mRequestChord += $"_{mScaleEntered}";

        mCurrentChord = await ChordFinderService.FindChord(mRequestChord);
        mRequestFailed = (mCurrentChord is null) ? true : false;
    }

    private async Task ToggleButton(EntryButton buttonPressed)
    {
        mCurrentChord = null;
        await mContext.ClearRectAsync(0, 0, mCanvasReference.Width, mCanvasReference.Height);

        switch (buttonPressed.Stage)
        {
            case ChordEntryStage.Note:
            {
                mNoteEntered = buttonPressed.APIName;
                mCurrentNote.CSS = "EntryButton";
                mCurrentNote = buttonPressed;
                mCurrentNote.CSS = "EntryButtonPressed";
            }
            break;

            case ChordEntryStage.Accidental:
            {
                mAccidentalEntered = buttonPressed.APIName;
                mCurrentAcc.CSS = "EntryButton";
                mCurrentAcc = buttonPressed;
                mCurrentAcc.CSS = "EntryButtonPressed";
            }
            break; 

            case ChordEntryStage.Scale:
            {
                mScaleEntered = buttonPressed.APIName;
                mCurrentScale.CSS = "EntryButton";
                mCurrentScale = buttonPressed;
                mCurrentScale.CSS = "EntryButtonPressed";
            }
            break;
        }

        await RequestChord();
    }

    protected override async Task OnInitializedAsync()
    {
        mCurrentNote = mNoteButtons[2];
        mCurrentNote.CSS = "EntryButtonPressed";

        mCurrentAcc = mAccButtons[0];
        mCurrentAcc.CSS = "EntryButtonPressed";

        mCurrentScale = mScaleButtons[0];
        mCurrentScale.CSS = "EntryButtonPressed";

        await RequestChord();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            mContext = await mCanvasReference.CreateCanvas2DAsync();
            mContextHidden = await mCanvasReferenceHidden.CreateCanvas2DAsync();
        }

        if (mCurrentChord is null) return;

        await mContextHidden.ClearRectAsync(0, 0, mCanvasReferenceHidden.Width, mCanvasReferenceHidden.Height);
        await ChordBoxImage.CreateImage(mContextHidden, mCurrentChord, ChordBoxImage.Layout.Two, 12.0);
        await mContext.DrawImageAsync(mCanvasReferenceHidden.CanvasReference, 0, 0);
    }

}