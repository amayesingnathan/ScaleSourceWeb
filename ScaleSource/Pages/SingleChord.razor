@page "/"
@page "/singlechord"

<PageTitle>Single Chords</PageTitle>

@using ScaleSourceWeb.Data
@using ChordCanvas
@using Blazor.Extensions; 
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D
@inject ChordFinderService ChordService

<h1>Single Chords</h1>

<SfButtonGroup CssClass="e-round-corner">
@foreach (var noteButton in mNoteButtons)
{
    <ButtonGroupButton @bind=@noteButton.Button IsToggle="true"
    @onclick="async() => await ToggleButton(noteButton)">@noteButton.Name</ButtonGroupButton>
}
</SfButtonGroup>

<br />

<SfButtonGroup CssClass="e-round-corner">
@foreach (var accidentalButton in mAccButtons)
{
    <ButtonGroupButton @bind=@accidentalButton.Button IsToggle="true" 
    @onclick="async() => await ToggleButton(accidentalButton)">@accidentalButton.Name</ButtonGroupButton>
}
</SfButtonGroup>

<br />

<SfButtonGroup CssClass="e-round-corner">
@foreach (var scaleButton in mScaleButtons)
{
    <ButtonGroupButton @bind=@scaleButton.Button IsToggle="true" 
    @onclick="async() => await ToggleButton(scaleButton)">@scaleButton.Name</ButtonGroupButton>
}
</SfButtonGroup>

<br />

@if (mRequestFailed)
{
    <p>Request Failed. The entered chord may have been invalid.</p>
}

<BECanvas @ref="mCanvasReference" Width="1200" Height="800"></BECanvas>

@code {
    private ChordEntryStage mChordEntryStage = ChordEntryStage.Note;

    private EntryButton[] mNoteButtons = Enumerable.Range(0, 7).Select(i => new EntryButton(i, ChordEntryStage.Note)).ToArray();
    private EntryButton[] mAccButtons = Enumerable.Range(0, 3).Select(i => new EntryButton(i, ChordEntryStage.Accidental)).ToArray();
    private EntryButton[] mScaleButtons = Enumerable.Range(0, 2).Select(i => new EntryButton(i, ChordEntryStage.Scale)).ToArray();

    private string mNoteEntered = "C";
    private string mAccidentalEntered = "";
    private string mScaleEntered = "";

    private string mRequestChord = "";

    private Chord? mCurrentChord = null;
    private bool mRequestFailed = false;

    private Canvas2DContext? mContext;
    protected BECanvasComponent? mCanvasReference;

    private async Task RequestChord()
    {
        mRequestChord = mNoteEntered + mAccidentalEntered;
        if (mScaleEntered != string.Empty)
            mRequestChord += $"_{mScaleEntered}";

        mCurrentChord = await ChordFinderService.FindChord(mRequestChord);
        mRequestFailed = (mCurrentChord is null) ? true : false;
    }

    private async Task ToggleButton(EntryButton buttonPressed)
    {
        switch (buttonPressed.Stage)
        {
            case ChordEntryStage.Note:
                mNoteEntered = buttonPressed.APIName;
                break;

            case ChordEntryStage.Accidental:
                mAccidentalEntered = buttonPressed.APIName;
                break; 

            case ChordEntryStage.Scale:
                mScaleEntered = buttonPressed.APIName;
                break;
        }

        await RequestChord();
    }

    protected override async Task OnInitializedAsync()
    {
        await RequestChord();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (mCurrentChord is null) return;
        if (mRequestFailed) return;

        if (mContext is null)
            mContext = await mCanvasReference.CreateCanvas2DAsync();
                
        await mContext.ClearRectAsync(0, 0, mCanvasReference.Width, mCanvasReference.Height);
        await ChordBoxImage.CreateImage(mContext, mCurrentChord, ChordBoxImage.Layout.Two, 12.0);

    }

}