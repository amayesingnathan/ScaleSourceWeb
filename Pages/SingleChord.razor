@page "/singlechord"

<PageTitle>Single Chords</PageTitle>

@using ScaleSourceWeb.Data
@inject ChordFinderService ChordService

<h1>Single Chords</h1>

@switch (mChordEntryStage)
{
    case ChordEntryStage.Note:
    {
        <SfButtonGroup CssClass="e-round-corner">
            @if (mEntryButtons is not null)
            {
                @foreach (var noteButton in mEntryButtons)
                {
                    <ButtonGroupButton @bind=@noteButton.Button IsToggle="true"
                    @onclick="() => ToggleButton(noteButton)"> @noteButton.Name</ButtonGroupButton>
                }
            }
        </SfButtonGroup>
        <SfButton CssClass="e-round-corner" @onclick="NextButton">Next</SfButton>
    }
    break;

    case ChordEntryStage.Accidental:
    {
        <SfButton CssClass="e-round-corner" @onclick="BackButton">Back</SfButton>
        <SfButtonGroup CssClass="e-round-corner">
            @if (mEntryButtons is not null)
            {
                @foreach (var accidentalButton in mEntryButtons)
                {
                    <ButtonGroupButton @bind=@accidentalButton.Button IsToggle="true" 
                    @onclick="() => ToggleButton(accidentalButton)">@accidentalButton.Name</ButtonGroupButton>
                }
            }
        </SfButtonGroup>
        <SfButton CssClass="e-round-corner" @onclick="NextButton">Next</SfButton>
    }
    break;

    case ChordEntryStage.Scale:
    {
        <SfButton CssClass="e-round-corner" @onclick="BackButton">Back</SfButton>
        <SfButtonGroup CssClass="e-round-corner">
            @if (mEntryButtons is not null)
            {
                @foreach (var scaleButton in mEntryButtons)
                {
                    <ButtonGroupButton @bind=@scaleButton.Button IsToggle="true" 
                    @onclick="() => ToggleButton(scaleButton)">@scaleButton.Name</ButtonGroupButton>
                }
            }
        </SfButtonGroup>
        <SfButton CssClass="e-round-corner" @onclick="GoButton">Go</SfButton>
    }
    break;

    case ChordEntryStage.Display:
    {
        <SfButton CssClass="e-round-corner" @onclick="HomeButton">Start</SfButton>
        @if (mCurrentChord is null && !mRequestFailed)
        {
            <p><em>Loading...</em></p>
        }
        else if (mRequestFailed)
        {
            <p><em>Request failed. Check that your entered chord was valid.</em></p>
        }
        else
        { 
            <table class="table">
                <thead>
                    <tr>
                        <th>Chord Name</th>
                        <th>String</th>
                        <th>Fingering</th>
                        <th>Notes</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>@mCurrentChord.ChordName</td>
                        <td>@mCurrentChord.Strings</td>
                        <td>@mCurrentChord.Fingering</td>
                        <td>@mCurrentChord.Tones</td>
                    </tr>
                </tbody>
            </table>
        }
    }
    break;
}

@code {
    private ChordEntryStage mChordEntryStage = ChordEntryStage.Note;

    private EntryButton[]? mEntryButtons = Enumerable.Range(0, 7).Select(i => new EntryButton(i, ChordEntryStage.Note)).ToArray();

    private string mNoteEntered = "";
    private string mAccidentalEntered = "";
    private string mScaleEntered = "";

    private string mRequestChord = "";

    private Chord? mCurrentChord = null;
    private bool mRequestFailed = false;

    private void ToggleButton(EntryButton buttonPressed)
    {
        switch (buttonPressed.Stage)
        {
            case ChordEntryStage.Note:
                mNoteEntered = buttonPressed.APIName;
                break;

            case ChordEntryStage.Accidental:
                {
                    mAccidentalEntered = buttonPressed.APIName;
                    break; 
                }

            case ChordEntryStage.Scale:
                mScaleEntered = buttonPressed.APIName;
                break;
        }
    }

    private void BackButton()
    {
        switch (mChordEntryStage)
        {
            case ChordEntryStage.Accidental:
                {
                    mChordEntryStage = ChordEntryStage.Note;
                    mEntryButtons = Enumerable.Range(0, 7).Select(i => new EntryButton(i, ChordEntryStage.Note)).ToArray();
                    break;
                }

            case ChordEntryStage.Scale:
                {
                    mChordEntryStage = ChordEntryStage.Accidental;
                    mEntryButtons = Enumerable.Range(0, 3).Select(i => new EntryButton(i, ChordEntryStage.Accidental)).ToArray();
                    break;
                }

            case ChordEntryStage.Display:
                {
                    mChordEntryStage = ChordEntryStage.Scale;
                    mEntryButtons = Enumerable.Range(0, 2).Select(i => new EntryButton(i, ChordEntryStage.Scale)).ToArray();
                    break;
                }
        }
    }

    private void NextButton()
    {
        switch (mChordEntryStage)
        {
            case ChordEntryStage.Note:
                {
                    mChordEntryStage = ChordEntryStage.Accidental;
                    mEntryButtons = Enumerable.Range(0, 3).Select(i => new EntryButton(i, ChordEntryStage.Accidental)).ToArray();
                    break;
                }

            case ChordEntryStage.Accidental:
                {
                    mChordEntryStage = ChordEntryStage.Scale;
                    mEntryButtons = Enumerable.Range(0, 2).Select(i => new EntryButton(i, ChordEntryStage.Scale)).ToArray();
                    break;
                }
        }
    }

    private void HomeButton()
    {
        mChordEntryStage = ChordEntryStage.Note;
        mEntryButtons = Enumerable.Range(0, 7).Select(i => new EntryButton(i, ChordEntryStage.Note)).ToArray();
    }

    private async Task GoButton()
    {
        mRequestChord = mNoteEntered + mAccidentalEntered;
        if (mScaleEntered != string.Empty)
            mRequestChord += "_" + mScaleEntered;

        mCurrentChord = await ChordFinderService.FindChord(mRequestChord);
        mRequestFailed = (mCurrentChord is null) ? true : false;

        mEntryButtons = null;
        mChordEntryStage = ChordEntryStage.Display;
    }
}